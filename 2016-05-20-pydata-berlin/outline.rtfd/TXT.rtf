{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww19980\viewh14360\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \
I work for Transit App\
\
- what does it do\
\
image: Usually would be designed as thin client to webservice\
\
Most of the data is due to transit schedules, what if we move them to the client\
\
webservice -- usually json\
\
image: new design - schedule in the client\
\
show compresssion in python, library in c++\
\
advantages:\
user experience\
- works faster (up to 5s to retrieve data, now 150ms)\
- works offline\
\
strain on servers\
- load on server redueced, millions of sessions served from one server\
- 'online mode' uses same code\
\
problem: size of schedules\
VBB: 26MB zip\
-> on 3G at 200kbit/s, takes 17min to download\
->w\
\
inside: 250MB of csv files\
"numbers": stoptimes: 220MB\
"structured data" (stops, routes, trips, calendars, ...): 30MB\
\
\
\
gtfs, zip of csv files\
\
need compression\
\
schedule data:\
numbers - stoptimes\
structured data - stops, routes, calendars, ...\
\
compressing numbers\
- secret sauce, but giving some idea\
- show some schedule\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 {{\NeXTGraphic Pasted Graphic.tiff \width19520 \height6340
}¬}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 Look at example: M10 pdf\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 {{\NeXTGraphic Pasted Graphic 1.tiff \width19340 \height9380
}¬}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
\
The rest of the data is a lot of structured data, a lot of records,\
\
\
\
show structure image\
\
stops\
  name\
  stopCode\
  lat\
  lng\
  servicePatternId\
  servicePatternOffset\
\
From high to low level:\
\
JSON\
\
messagepack\
\
captain proto\
\
flat buffers\
\
-> not enough control over bits and bytes\
-> schemas ugh\
\
namedstruct - C-style\
\
namedstruct - move out strings\
\
namedstruct - bitfields\
\
namedstruct - bitfieldarrays and hacks, lat,lng offsets\
\
\
\
in json that would be simple\
-> but too big\
\
binary files\
\
message-pack\
streams\
\
captain proto\
schemas\
\
our solution\
namedstruct\
\
- examples\
\
\
-> not a good idea\
\
-> like the control\
-> will probably implement schemas\
\
stick with \
messagepack for small data\
\
others use\
- proto\
- protocol buf\
- flatbuffers\
\
thanks\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}